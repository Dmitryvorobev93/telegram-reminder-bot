from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.date import DateTrigger
from datetime import datetime
import logging
from database import Database

class ReminderScheduler:
    def __init__(self, bot):
        self.scheduler = BackgroundScheduler()
        self.db = Database()
        self.bot = bot
        self.start_scheduler()

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.start()
        logging.info("Scheduler started")

    def add_reminder(self, user_id, reminder_text, reminder_time, reminder_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        trigger = DateTrigger(run_date=reminder_time)
        
        self.scheduler.add_job(
            self.send_reminder,
            trigger,
            id=str(reminder_id),
            args=[user_id, reminder_text, reminder_id]
        )
        
        logging.info(f"Reminder scheduled for {reminder_time}")

    async def send_reminder(self, user_id, reminder_text, reminder_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}"
            )
            self.db.mark_completed(reminder_id)
            logging.info(f"Reminder sent to user {user_id}")
        except Exception as e:
            logging.error(f"Failed to send reminder: {e}")

    def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.shutdown()