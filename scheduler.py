from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.date import DateTrigger
from datetime import datetime, timedelta
import logging
from database import Database
from utils import TimeParser

class ReminderScheduler:
    def __init__(self, bot):
        self.scheduler = BackgroundScheduler()
        self.db = Database()
        self.bot = bot
        self.start_scheduler()
        self.restore_pending_reminders()

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.start()
        logging.info("Scheduler started")

    def restore_pending_reminders(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        try:
            reminders = self.db.get_pending_reminders()
            for rem_id, user_id, text, reminder_time, repeat_type, notify_before in reminders:
                reminder_time = datetime.strptime(reminder_time, '%Y-%m-%d %H:%M:%S')
                
                # –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                self.add_reminder(user_id, text, reminder_time, rem_id)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ N –º–∏–Ω—É—Ç
                if notify_before > 0:
                    notify_time = reminder_time - timedelta(minutes=notify_before)
                    if notify_time > datetime.now():
                        self.add_notification(user_id, text, notify_time, rem_id, is_notification=True)
            
            logging.info(f"Restored {len(reminders)} pending reminders")
        except Exception as e:
            logging.error(f"Error restoring reminders: {e}")

    def add_reminder(self, user_id, reminder_text, reminder_time, reminder_id, is_notification=False):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        try:
            trigger = DateTrigger(run_date=reminder_time)
            
            job_id = f"notify_{reminder_id}" if is_notification else str(reminder_id)
            
            self.scheduler.add_job(
                self.send_reminder,
                trigger,
                id=job_id,
                args=[user_id, reminder_text, reminder_id, is_notification]
            )
            
            logging.info(f"Reminder scheduled for {reminder_time} (notification: {is_notification})")
        except Exception as e:
            logging.error(f"Error scheduling reminder: {e}")

    def add_notification(self, user_id, reminder_text, notify_time, reminder_id, is_notification=True):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ"""
        self.add_reminder(user_id, reminder_text, notify_time, reminder_id, is_notification)

    async def send_reminder(self, user_id, reminder_text, reminder_id, is_notification=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            if is_notification:
                message = f"üîî –°–∫–æ—Ä–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}"
            else:
                message = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}"
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                reminder = self.db.get_reminder(reminder_id)
                if reminder and reminder[6] == 'once':  # repeat_type
                    self.db.update_reminder_status(reminder_id, 'completed')
                elif reminder and reminder[6] != 'once':
                    # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è - —Å–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    self.schedule_next_repetition(reminder_id, reminder)
            
            await self.bot.send_message(chat_id=user_id, text=message)
            logging.info(f"Reminder sent to user {user_id} (notification: {is_notification})")
            
        except Exception as e:
            logging.error(f"Failed to send reminder: {e}")

    def schedule_next_repetition(self, reminder_id, reminder):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        try:
            user_id, reminder_text, reminder_time, category, repeat_type, status, notify_before = reminder[1:8]
            next_time = TimeParser.calculate_next_reminder(
                datetime.strptime(reminder_time, '%Y-%m-%d %H:%M:%S'), 
                repeat_type
            )
            
            if next_time:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                new_reminder_id = self.db.add_reminder(
                    user_id, reminder_text, next_time, category, repeat_type, notify_before
                )
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–≥–æ
                self.add_reminder(user_id, reminder_text, next_time, new_reminder_id)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ
                if notify_before > 0:
                    notify_time = next_time - timedelta(minutes=notify_before)
                    self.add_notification(user_id, reminder_text, notify_time, new_reminder_id, True)
                
                logging.info(f"Scheduled next repetition for reminder {new_reminder_id} at {next_time}")
                
        except Exception as e:
            logging.error(f"Error scheduling next repetition: {e}")

    def cancel_reminder(self, reminder_id):
        """–û—Ç–º–µ–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
        try:
            # –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if self.scheduler.get_job(str(reminder_id)):
                self.scheduler.remove_job(str(reminder_id))
            
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification_job_id = f"notify_{reminder_id}"
            if self.scheduler.get_job(notification_job_id):
                self.scheduler.remove_job(notification_job_id)
                
            logging.info(f"Cancelled reminder {reminder_id}")
        except Exception as e:
            logging.error(f"Error cancelling reminder: {e}")

    def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.shutdown()