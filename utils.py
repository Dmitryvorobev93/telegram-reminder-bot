import re
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Config
from config import Config

class TimeParser:
    @staticmethod
    def parse_time(time_text):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
        time_text = time_text.lower().strip()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–∏–≤–Ω–æ–µ datetime –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        now_utc = datetime.utcnow()
        # –ú–æ—Å–∫–≤–∞ = UTC+3
        moscow_offset = timedelta(hours=3)
        now_moscow = now_utc + moscow_offset
        
        # –ë–∞–∑–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–∫–∞–∫ –±—ã–ª–∏)
        if time_text.startswith('—á–µ—Ä–µ–∑'):
            return TimeParser._parse_relative_time(time_text, now_moscow)
        elif '–∑–∞–≤—Ç—Ä–∞' in time_text:
            return TimeParser._parse_tomorrow_time(time_text, now_moscow)
        elif '—Å–µ–≥–æ–¥–Ω—è' in time_text and '–≤' in time_text:
            return TimeParser._parse_today_time(time_text, now_moscow)
        elif ':' in time_text and len(time_text) <= 5:
            return TimeParser._parse_simple_time(time_text, now_moscow)
        elif '.' in time_text and ' –≤ ' in time_text:
            return TimeParser._parse_full_datetime(time_text)
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
    
    @staticmethod
    def _parse_relative_time(time_text, now):
        if '–º–∏–Ω—É—Ç' in time_text:
            minutes = int(''.join(filter(str.isdigit, time_text)))
            return now + timedelta(minutes=minutes)
        elif '—á–∞—Å' in time_text:
            hours = int(''.join(filter(str.isdigit, time_text)))
            return now + timedelta(hours=hours)
        elif '–¥–µ–Ω—å' in time_text or '–¥–Ω—è' in time_text or '–¥–Ω–µ–π' in time_text:
            days = int(''.join(filter(str.isdigit, time_text)))
            return now + timedelta(days=days)
        elif '–Ω–µ–¥–µ–ª' in time_text:
            weeks = int(''.join(filter(str.isdigit, time_text)))
            return now + timedelta(weeks=weeks)
        elif '–º–µ—Å—è—Ü' in time_text:
            months = int(''.join(filter(str.isdigit, time_text)))
            return now + relativedelta(months=months)
        else:
            raise ValueError("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
    
    @staticmethod
    def _parse_tomorrow_time(time_text, now):
        time_part = time_text.split('–≤ ')[1]
        hours, minutes = map(int, time_part.split(':'))
        tomorrow = now + timedelta(days=1)
        return tomorrow.replace(hour=hours, minute=minutes, second=0, microsecond=0)
    
    @staticmethod
    def _parse_today_time(time_text, now):
        time_part = time_text.split('–≤ ')[1]
        hours, minutes = map(int, time_part.split(':'))
        return now.replace(hour=hours, minute=minutes, second=0, microsecond=0)
    
    @staticmethod
    def _parse_simple_time(time_text, now):
        hours, minutes = map(int, time_text.split(':'))
        reminder_time = now.replace(hour=hours, minute=minutes, second=0, microsecond=0)
        if reminder_time < now:
            reminder_time += timedelta(days=1)
        return reminder_time
    
    @staticmethod
    def _parse_full_datetime(time_text):
        date_part, time_part = time_text.split(' –≤ ')
        day, month, year = map(int, date_part.split('.'))
        hours, minutes = map(int, time_part.split(':'))
        # –°–æ–∑–¥–∞–µ–º datetime –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
        naive_dt = datetime(year, month, day, hours, minutes)
        moscow_offset = timedelta(hours=3)
        return naive_dt - moscow_offset  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
    
    @staticmethod
    def calculate_next_reminder(reminder_time, repeat_type):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è"""
        if repeat_type == 'daily':
            return reminder_time + timedelta(days=1)
        elif repeat_type == 'weekly':
            return reminder_time + timedelta(weeks=1)
        elif repeat_type == 'monthly':
            return reminder_time + relativedelta(months=1)
        elif repeat_type == 'yearly':
            return reminder_time + relativedelta(years=1)
        return None

class TextFormatter:
    @staticmethod
    def format_reminder_list(reminders):
        if not reminders:
            return "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
        
        text = "üìã –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        for rem_id, text_msg, time, category, repeat_type, status in reminders:
            if status == 'completed':
                status_icon = "‚úÖ"
            elif status == 'cancelled':
                status_icon = "‚ùå"
            else:
                status_icon = "‚è≥"
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏
            try:
                if '.' in time:
                    # –§–æ—Ä–º–∞—Ç —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏: 2025-09-29 19:55:23.191360
                    time_obj = datetime.strptime(time, '%Y-%m-%d %H:%M:%S.%f')
                else:
                    # –§–æ—Ä–º–∞—Ç –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥: 2025-09-29 19:55:23
                    time_obj = datetime.strptime(time, '%Y-%m-%d %H:%M:%S')
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                moscow_offset = timedelta(hours=3)
                moscow_time = time_obj + moscow_offset
                time_str = moscow_time.strftime('%d.%m.%Y %H:%M')
            except ValueError as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ {time}: {e}")
                time_str = time  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            category_icon = Config.CATEGORIES.get(category, 'üìå').split(' ')[0]
            repeat_text = f" ({Config.REPEAT_OPTIONS.get(repeat_type, '')})" if repeat_type != 'once' else ""
            
            text += f"{status_icon} {category_icon} {text_msg}\n"
            text += f"   üìÖ {time_str}{repeat_text}\n"
            text += f"   ID: {rem_id}\n\n"
        
        return text
    
    @staticmethod
    def format_stats(stats):
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
        text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed', 0)}\n"
        text += f"‚è≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active', 0)}\n"
        text += f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {stats.get('cancelled', 0)}\n"
        text += f"üìà –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {stats.get('total', 0)}\n"
        
        if stats.get('categories'):
            text += "\nüìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            for category, count in stats['categories'].items():
                category_name = Config.CATEGORIES.get(category, '–î—Ä—É–≥–æ–µ')
                text += f"  {category_name}: {count}\n"
        
        return text