import os
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ContextTypes, ConversationHandler
)
from database import Database
from scheduler import ReminderScheduler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_REMINDER, SET_TIME = range(2)

class ReminderBot:
    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        self.db = Database()
        self.application = Application.builder().token(self.token).build()
        self.scheduler = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("my_reminders", self.my_reminders_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        reminder_conv_handler = ConversationHandler(
            entry_points=[CommandHandler("remind", self.remind_command)],
            states={
                SET_REMINDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_reminder_text)],
                SET_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_reminder_time)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel_command)],
        )
        
        self.application.add_handler(reminder_conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.message.from_user
        welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/remind - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/my_reminders - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/help - –ø–æ–º–æ—â—å

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–Ω–∞–ø–æ–º–Ω–∏" –∏ —è –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π!
        """
        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*

1. *–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:*
   –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /remind
   –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–Ω–∞–ø–æ–º–Ω–∏ [—Ç–µ–∫—Å—Ç] —á–µ—Ä–µ–∑ [–≤—Ä–µ–º—è]"

2. *–ü—Ä–∏–º–µ—Ä—ã:*
   "–Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
   "–Ω–∞–ø–æ–º–Ω–∏ –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:00"
   "–Ω–∞–ø–æ–º–Ω–∏ –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç"

3. *–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*
   /my_reminders - –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ —Ç–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:*
- –ß–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤/–¥–Ω–µ–π
- –ó–∞–≤—Ç—Ä–∞ –≤ HH:MM
- –í HH:MM (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è)
- DD.MM.YYYY –≤ HH:MM
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def remind_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        await update.message.reply_text(
            "–û —á–µ–º —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"
        )
        return SET_REMINDER

    async def set_reminder_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        context.user_data['reminder_text'] = update.message.text
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? \n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
            "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00\n" 
            "‚Ä¢ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ 25.12.2024 –≤ 10:00"
        )
        return SET_TIME

    async def set_reminder_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        user_id = update.message.from_user.id
        reminder_text = context.user_data['reminder_text']
        time_text = update.message.text
        
        try:
            reminder_time = self.parse_time(time_text)
            reminder_id = self.db.add_reminder(user_id, reminder_text, reminder_time)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler.add_reminder(user_id, reminder_text, reminder_time, reminder_id)
            
            await update.message.reply_text(
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n"
                f"*–ß—Ç–æ:* {reminder_text}\n"
                f"*–ö–æ–≥–¥–∞:* {reminder_time.strftime('%d.%m.%Y –≤ %H:%M')}",
                parse_mode='Markdown'
            )
            
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùå –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!\n"
                f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: '—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞' –∏–ª–∏ '–∑–∞–≤—Ç—Ä–∞ –≤ 15:00'"
            )
            return SET_TIME
        
        return ConversationHandler.END

    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    async def my_reminders_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.message.from_user.id
        reminders = self.db.get_user_reminders(user_id)
        
        if not reminders:
            await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return
        
        reminder_text = "üìã –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        for rem_id, text, time, completed in reminders:
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if completed else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
            time_str = datetime.strptime(time, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
            reminder_text += f"‚Ä¢ {text}\n  üìÖ {time_str} - {status}\n\n"
        
        await update.message.reply_text(reminder_text)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower()
        
        if text.startswith('–Ω–∞–ø–æ–º–Ω–∏'):
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ "–Ω–∞–ø–æ–º–Ω–∏ [—Ç–µ–∫—Å—Ç] —á–µ—Ä–µ–∑ [–≤—Ä–µ–º—è]"
            try:
                if " —á–µ—Ä–µ–∑ " in text:
                    parts = text.split(" —á–µ—Ä–µ–∑ ")
                    reminder_text = parts[0].replace("–Ω–∞–ø–æ–º–Ω–∏", "").strip()
                    time_part = "—á–µ—Ä–µ–∑ " + parts[1]
                    
                    reminder_time = self.parse_time(time_part)
                    user_id = update.message.from_user.id
                    
                    reminder_id = self.db.add_reminder(user_id, reminder_text, reminder_time)
                    self.scheduler.add_reminder(user_id, reminder_text, reminder_time, reminder_id)
                    
                    await update.message.reply_text(
                        f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–ø–æ–º–Ω—é: '{reminder_text}' "
                        f"{reminder_time.strftime('%d.%m.%Y –≤ %H:%M')}"
                    )
                else:
                    await update.message.reply_text(
                        "–ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–Ω–∞–ø–æ–º–Ω–∏ [—Ç–µ–∫—Å—Ç] —á–µ—Ä–µ–∑ [–≤—Ä–µ–º—è]'\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞'"
                    )
            except ValueError as e:
                await update.message.reply_text(
                    f"‚ùå –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /remind "
                    f"–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–∞–ø–æ–º–Ω–∏ [—á—Ç–æ] —á–µ—Ä–µ–∑ [–∫–æ–≥–¥–∞]'"
                )
        else:
            await update.message.reply_text(
                "–ù–∞–ø–∏—à–∏ '–Ω–∞–ø–æ–º–Ω–∏' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏"
            )

    def parse_time(self, time_text):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ datetime"""
        time_text = time_text.lower().strip()
        now = datetime.now()
        
        if time_text.startswith('—á–µ—Ä–µ–∑'):
            # –§–æ—Ä–º–∞—Ç: "—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤/–¥–Ω–µ–π"
            if '–º–∏–Ω—É—Ç' in time_text:
                minutes = int(''.join(filter(str.isdigit, time_text)))
                return now + timedelta(minutes=minutes)
            elif '—á–∞—Å' in time_text:
                hours = int(''.join(filter(str.isdigit, time_text)))
                return now + timedelta(hours=hours)
            elif '–¥–µ–Ω—å' in time_text or '–¥–Ω—è' in time_text or '–¥–Ω–µ–π' in time_text:
                days = int(''.join(filter(str.isdigit, time_text)))
                return now + timedelta(days=days)
        
        elif '–∑–∞–≤—Ç—Ä–∞' in time_text:
            # –§–æ—Ä–º–∞—Ç: "–∑–∞–≤—Ç—Ä–∞ –≤ HH:MM"
            time_part = time_text.split('–≤ ')[1]
            hours, minutes = map(int, time_part.split(':'))
            tomorrow = now + timedelta(days=1)
            return tomorrow.replace(hour=hours, minute=minutes, second=0, microsecond=0)
        
        elif ':' in time_text and len(time_text) <= 5:
            # –§–æ—Ä–º–∞—Ç: "HH:MM" –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            hours, minutes = map(int, time_text.split(':'))
            reminder_time = now.replace(hour=hours, minute=minutes, second=0, microsecond=0)
            if reminder_time < now:
                reminder_time += timedelta(days=1)
            return reminder_time
        
        elif '.' in time_text:
            # –§–æ—Ä–º–∞—Ç: "DD.MM.YYYY –≤ HH:MM"
            date_part, time_part = time_text.split(' –≤ ')
            day, month, year = map(int, date_part.split('.'))
            hours, minutes = map(int, time_part.split(':'))
            return datetime(year, month, day, hours, minutes)
        
        raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è application
        self.scheduler = ReminderScheduler(self.application.bot)
        
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        self.application.run_polling()

if __name__ == '__main__':
    bot = ReminderBot()
    bot.run()