import os
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)

from config import Config
from database import Database
from scheduler import ReminderScheduler
from keyboards import Keyboards
from utils import TimeParser, TextFormatter

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv()

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print("Current directory:", os.getcwd())
print("Files in current directory:", os.listdir('.'))
print("BOT_TOKEN exists:", os.getenv('BOT_TOKEN') is not None)
print("BOT_TOKEN value:", '***' if os.getenv('BOT_TOKEN') else 'None')

class ImprovedReminderBot:
    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        if not self.token:
            raise ValueError("BOT_TOKEN environment variable is not set")
        # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥...

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_REMINDER, SET_TIME, SET_CATEGORY, SET_REPEAT, SET_NOTIFICATION = range(5)

class ImprovedReminderBot:
    def __init__(self):
        self.token = Config.BOT_TOKEN
        self.db = Database()
        self.application = Application.builder().token(self.token).build()
        self.scheduler = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # ConversationHandler –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–í–´–ú!
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("remind", self.start_reminder_creation),
                MessageHandler(filters.Regex('^(üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)$'), self.start_reminder_creation)
            ],
            states={
                SET_REMINDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_reminder_text)],
                SET_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_reminder_time)],
                SET_CATEGORY: [CallbackQueryHandler(self.process_conversation_callback)],
                SET_REPEAT: [CallbackQueryHandler(self.process_conversation_callback)],
                SET_NOTIFICATION: [CallbackQueryHandler(self.process_conversation_callback)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel_creation)],
        )
        
        self.application.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.application.add_handler(CallbackQueryHandler(self.handle_general_callback))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("my_reminders", self.my_reminders_command))
        self.application.add_handler(CommandHandler("cancel", self.cancel_command))
        
        # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.message.from_user
        welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø —É–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞! –¢–µ–ø–µ—Ä—å —è —É–º–µ—é:

üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
üîÑ –†–∞–±–æ—Ç–∞—Ç—å —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
üîî –£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞—Ä–∞–Ω–µ–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö
üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
/remind - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/help - –ø–æ–º–æ—â—å
        """
        await update.message.reply_text(
            welcome_text, 
            reply_markup=Keyboards.main_menu(),
            parse_mode='Markdown'
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É–ª—É—á—à–µ–Ω–Ω—ã–º –±–æ—Ç–æ–º:*

*üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*
1. –ù–∞–∂–º–∏ "üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
2. –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
3. –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è (–∏–ª–∏ –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–º)
4. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
5. –ù–∞—Å—Ç—Ä–æ–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
6. –ù–∞—Å—Ç—Ä–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

*üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:*
- –ù–∞–∂–º–∏ "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º

*üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ, –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∑–∞–Ω–æ–≤–æ

*üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ:*
- –ü–æ–ª—É—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 15, 30, 60 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è

*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

*–ü—Ä–∏–º–µ—Ä—ã –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥:*
"–Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
"–Ω–∞–ø–æ–º–Ω–∏ –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:00"
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.message.from_user.id
        stats = self.db.get_user_stats(user_id)
        
        stats_text = TextFormatter.format_stats(stats)
        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def my_reminders_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self.show_reminders_list(update)

    # ===== CONVERSATION HANDLER METHODS =====

    async def start_reminder_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        context.user_data.clear()
        await update.message.reply_text(
            "üìù –û —á–µ–º —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"
        )
        return SET_REMINDER

    async def process_reminder_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        context.user_data['reminder_text'] = update.message.text
        await update.message.reply_text(
            "‚è∞ –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? \n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
            "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00\n" 
            "‚Ä¢ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ 25.12.2024 –≤ 10:00"
        )
        return SET_TIME

    async def process_reminder_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        time_text = update.message.text
        
        try:
            reminder_time = TimeParser.parse_time(time_text)
            context.user_data['reminder_time'] = reminder_time
            
            await update.message.reply_text(
                "üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=Keyboards.categories()
            )
            return SET_CATEGORY
            
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùå –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!\n"
                f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: '—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞' –∏–ª–∏ '–∑–∞–≤—Ç—Ä–∞ –≤ 15:00'"
            )
            return SET_TIME

    async def process_conversation_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è ConversationHandler"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        current_state = context.user_data.get('conversation_state', SET_CATEGORY)
        
        print(f"DEBUG: Conversation callback - data: {data}, current_state: {current_state}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        if data == 'cancel':
            await query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return ConversationHandler.END
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if current_state == SET_CATEGORY:
            return await self.handle_category_callback(query, context, data)
        elif current_state == SET_REPEAT:
            return await self.handle_repeat_callback(query, context, data)
        elif current_state == SET_NOTIFICATION:
            return await self.handle_notification_callback(query, context, data)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END

    async def handle_category_callback(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if data.startswith('category_'):
            category = data.replace('category_', '')
            context.user_data['category'] = category
            
            await query.edit_message_text(
                text=f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {Config.CATEGORIES.get(category, '–î—Ä—É–≥–æ–µ')}\n\n"
                     "üîÑ –ù—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?",
                reply_markup=Keyboards.repeat_options()
            )
            context.user_data['conversation_state'] = SET_REPEAT
            return SET_REPEAT
        else:
            await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞")
            return SET_CATEGORY

    async def handle_repeat_callback(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        if data.startswith('repeat_'):
            repeat_type = data.replace('repeat_', '')
            context.user_data['repeat_type'] = repeat_type
            
            # –î–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö - —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            if repeat_type == 'once':
                context.user_data['notify_before'] = 0
                return await self.finish_reminder_creation(query, context)
            
            # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            keyboard = [
                [
                    InlineKeyboardButton("–ó–∞ 15 –º–∏–Ω—É—Ç", callback_data="notify_15"),
                    InlineKeyboardButton("–ó–∞ 30 –º–∏–Ω—É—Ç", callback_data="notify_30")
                ],
                [
                    InlineKeyboardButton("–ó–∞ 60 –º–∏–Ω—É—Ç", callback_data="notify_60"),
                    InlineKeyboardButton("–ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å", callback_data="notify_0")
                ],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            
            await query.edit_message_text(
                text=f"üîÑ –ü–æ–≤—Ç–æ—Ä: {Config.REPEAT_OPTIONS.get(repeat_type, '')}\n\n"
                     "üîî –£–≤–µ–¥–æ–º–∏—Ç—å –∑–∞—Ä–∞–Ω–µ–µ?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            context.user_data['conversation_state'] = SET_NOTIFICATION
            return SET_NOTIFICATION
        else:
            await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞")
            return SET_REPEAT

    async def handle_notification_callback(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if data.startswith('notify_'):
            notify_before = int(data.replace('notify_', ''))
            context.user_data['notify_before'] = notify_before
            
            return await self.finish_reminder_creation(query, context)
        else:
            await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return SET_NOTIFICATION

    async def finish_reminder_creation(self, query, context):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        user_id = query.from_user.id
        reminder_text = context.user_data.get('reminder_text', '')
        reminder_time = context.user_data.get('reminder_time')
        category = context.user_data.get('category', 'other')
        repeat_type = context.user_data.get('repeat_type', 'once')
        notify_before = context.user_data.get('notify_before', 0)
        
        if not reminder_text or not reminder_time:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        reminder_id = self.db.add_reminder(
            user_id, reminder_text, reminder_time, category, repeat_type, notify_before
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler.add_reminder(user_id, reminder_text, reminder_time, reminder_id)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ
        if notify_before > 0:
            notify_time = reminder_time - timedelta(minutes=notify_before)
            if notify_time > datetime.now():
                self.scheduler.add_notification(user_id, reminder_text, notify_time, reminder_id, True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_text = (
            f"‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!*\n\n"
            f"*–ß—Ç–æ:* {reminder_text}\n"
            f"*–ö–æ–≥–¥–∞:* {reminder_time.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {Config.CATEGORIES.get(category, '–î—Ä—É–≥–æ–µ')}\n"
            f"*–ü–æ–≤—Ç–æ—Ä:* {Config.REPEAT_OPTIONS.get(repeat_type, '–û–¥–∏–Ω —Ä–∞–∑')}\n"
        )
        
        if notify_before > 0:
            success_text += f"*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:* –∑–∞ {notify_before} –º–∏–Ω—É—Ç\n"
        
        success_text += f"\nID: {reminder_id}"
        
        await query.edit_message_text(
            text=success_text,
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if 'conversation_state' in context.user_data:
            del context.user_data['conversation_state']
        
        return ConversationHandler.END

    async def cancel_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if 'conversation_state' in context.user_data:
            del context.user_data['conversation_state']
            
        await update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=Keyboards.main_menu()
        )
        return ConversationHandler.END

    # ===== GENERAL CALLBACK HANDLER =====

    async def handle_general_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        print(f"DEBUG: General callback received: {data}")
        
        try:
            if data == 'back_to_list':
                await self.show_user_reminders(query)
            elif data == 'create_new':
                await query.edit_message_text(
                    "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É \"üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
                )
            elif data == 'show_stats':
                user_id = query.from_user.id
                stats = self.db.get_user_stats(user_id)
                stats_text = TextFormatter.format_stats(stats)
                await query.edit_message_text(stats_text, parse_mode='Markdown')
            elif data.startswith('complete_'):
                reminder_id = int(data.replace('complete_', ''))
                await self.complete_reminder(query, reminder_id)
            elif data.startswith('delete_'):
                reminder_id = int(data.replace('delete_', ''))
                await self.delete_reminder(query, reminder_id)
            elif data.startswith('edit_'):
                reminder_id = int(data.replace('edit_', ''))
                await self.show_edit_options(query, reminder_id)
            elif data.startswith('notify15_'):
                reminder_id = int(data.replace('notify15_', ''))
                await self.add_notification(query, reminder_id, 15)
            elif data.startswith('back_to_reminder_'):
                reminder_id = int(data.replace('back_to_reminder_', ''))
                await self.show_reminder_details(query, reminder_id)
            elif data == 'cancel':
                await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            else:
                # –ï—Å–ª–∏ callback –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –≤ –æ–±—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
                print(f"DEBUG: Unhandled callback in general handler: {data}")
                await query.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                
        except Exception as e:
            logging.error(f"Error in callback handler: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

    # ===== GENERAL MESSAGE HANDLER =====

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == 'üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è':
            await self.show_reminders_list(update)
        elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            await self.stats_command(update, context)
        elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
            await self.help_command(update, context)
        elif text == 'üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ':
            await self.start_reminder_creation(update, context)
        elif text == 'üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è':
            await update.message.reply_text(
                "üîÑ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É \"üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\" "
                "–∏ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è.",
                reply_markup=Keyboards.main_menu()
            )
        elif text.lower().startswith('–Ω–∞–ø–æ–º–Ω–∏'):
            await self.quick_reminder(update, text)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏",
                reply_markup=Keyboards.main_menu()
            )

    # ===== UTILITY METHODS =====

    async def show_reminders_list(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        user_id = update.message.from_user.id
        reminders = self.db.get_user_reminders(user_id, status='active')
        
        if not reminders:
            await update.message.reply_text(
                "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                reply_markup=Keyboards.main_menu()
            )
            return
        
        reminders_text = TextFormatter.format_reminder_list(reminders)
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(reminders_text) > 4000:
            parts = [reminders_text[i:i+4000] for i in range(0, len(reminders_text), 4000)]
            for part in parts:
                await update.message.reply_text(part, parse_mode='Markdown')
        else:
            await update.message.reply_text(reminders_text, parse_mode='Markdown')

    async def quick_reminder(self, update: Update, text: str):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            if " —á–µ—Ä–µ–∑ " in text:
                parts = text.split(" —á–µ—Ä–µ–∑ ")
                reminder_text = parts[0].replace("–Ω–∞–ø–æ–º–Ω–∏", "").strip()
                time_part = "—á–µ—Ä–µ–∑ " + parts[1]
                
                reminder_time = TimeParser.parse_time(time_part)
                user_id = update.message.from_user.id
                
                reminder_id = self.db.add_reminder(user_id, reminder_text, reminder_time)
                self.scheduler.add_reminder(user_id, reminder_text, reminder_time, reminder_id)
                
                await update.message.reply_text(
                    f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–ø–æ–º–Ω—é: '{reminder_text}' "
                    f"{reminder_time.strftime('%d.%m.%Y –≤ %H:%M')}",
                    reply_markup=Keyboards.main_menu()
                )
            else:
                await update.message.reply_text(
                    "–ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–Ω–∞–ø–æ–º–Ω–∏ [—Ç–µ–∫—Å—Ç] —á–µ—Ä–µ–∑ [–≤—Ä–µ–º—è]'\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞'",
                    reply_markup=Keyboards.main_menu()
                )
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùå –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É 'üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' "
                f"–¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è.",
                reply_markup=Keyboards.main_menu()
            )

    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã"""
        await update.message.reply_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=Keyboards.main_menu()
        )

    # ===== REMINDER MANAGEMENT METHODS =====

    async def show_user_reminders(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        reminders = self.db.get_user_reminders(user_id, status='active')
        
        reminders_text = TextFormatter.format_reminder_list(reminders)
        
        keyboard = [
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ", callback_data="create_new")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
        ]
        
        await query.edit_message_text(
            text=reminders_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def complete_reminder(self, query, reminder_id):
        """–û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ"""
        self.db.update_reminder_status(reminder_id, 'completed')
        self.scheduler.cancel_reminder(reminder_id)
        
        await query.edit_message_text(
            text="‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
            ])
        )

    async def delete_reminder(self, query, reminder_id):
        """–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        self.db.delete_reminder(reminder_id)
        self.scheduler.cancel_reminder(reminder_id)
        
        await query.edit_message_text(
            text="‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
            ])
        )

    async def show_edit_options(self, query, reminder_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        reminder = self.db.get_reminder(reminder_id)
        if not reminder:
            await query.edit_message_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        await query.edit_message_text(
            text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
                 f"–¢–µ–∫—Å—Ç: {reminder[2]}\n"
                 f"–í—Ä–µ–º—è: {reminder[3]}\n"
                 f"–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=Keyboards.edit_options(reminder_id)
        )

    async def show_reminder_details(self, query, reminder_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        reminder = self.db.get_reminder(reminder_id)
        if not reminder:
            await query.edit_message_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        status_icons = {
            'active': '‚è≥',
            'completed': '‚úÖ', 
            'cancelled': '‚ùå'
        }
        
        text = (
            f"{status_icons.get(reminder[6], '‚è≥')} *–î–µ—Ç–∞–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n\n"
            f"*–¢–µ–∫—Å—Ç:* {reminder[2]}\n"
            f"*–í—Ä–µ–º—è:* {reminder[3]}\n"
            f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {Config.CATEGORIES.get(reminder[4], '–î—Ä—É–≥–æ–µ')}\n"
            f"*–ü–æ–≤—Ç–æ—Ä:* {Config.REPEAT_OPTIONS.get(reminder[5], '–û–¥–∏–Ω —Ä–∞–∑')}\n"
            f"*–°—Ç–∞—Ç—É—Å:* {reminder[6]}\n"
            f"*ID:* {reminder_id}"
        )
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=Keyboards.reminder_actions(reminder_id)
        )

    async def add_notification(self, query, reminder_id, minutes):
        """–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ"""
        reminder = self.db.get_reminder(reminder_id)
        if not reminder:
            await query.edit_message_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        self.db.update_reminder(reminder_id, notify_before=minutes)
        
        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        reminder_time = datetime.strptime(reminder[3], '%Y-%m-%d %H:%M:%S')
        notify_time = reminder_time - timedelta(minutes=minutes)
        
        if notify_time > datetime.now():
            self.scheduler.add_notification(reminder[1], reminder[2], notify_time, reminder_id, True)
    
        await query.edit_message_text(
            text=f"üîî –î–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ {minutes} –º–∏–Ω—É—Ç!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é", callback_data=f"back_to_reminder_{reminder_id}")]
            ])
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è application
        self.scheduler = ReminderScheduler(self.application.bot)
        
        print("–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        self.application.run_polling()

if __name__ == '__main__':
    bot = ImprovedReminderBot()
    bot.run()